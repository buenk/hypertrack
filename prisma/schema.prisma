generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String? // hashed by better-auth (optional; hash is stored on Account)
  createdAt     DateTime     @default(now())
  foodLogs      FoodLog[]
  symptomLogs   SymptomLog[]
  name          String
  emailVerified Boolean
  image         String?
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Food {
  id        String   @id @default(cuid())
  name      String
  brand     String?
  barcode   String?  @unique
  calories  Float?
  protein   Float?
  carbs     Float?
  fat       Float?
  source    String // "openfoodfacts" | "custom"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs FoodLog[]
}

model FoodLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  amount Float?
  unit   String? // e.g. "g", "ml", "piece"

  notes String?

  foodId String
  food   Food   @relation(fields: [foodId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Symptom {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs SymptomLog[]
}

model SymptomLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  severity  Int
  notes     String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  symptomId String
  symptom   Symptom @relation(fields: [symptomId], references: [id])

  @@map("symptom_log")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
